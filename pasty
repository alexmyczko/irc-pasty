#!/usr/bin/env python3

import sys, os, requests, logging, argparse, yaml, pickle, getpass, json

logging.getLogger("requests").setLevel(logging.WARNING)

CONFIG_FILE = os.path.join(os.path.expanduser('~'), '.pasty.conf')
EXAMPLE_CONFIG = 'server: https://your.pasty.server.example.com\nchannel: \'#mychannel\''
SESSION_FILE = os.path.join(os.path.expanduser('~'), '.pasty.session')

global SESSION_TRIES
SESSION_TRIES = 2
global LOADED_SESSION
LOADED_SESSION = False

display_mode_mapping = {
    'md' : 0,
    'code' : 1,
    'text' : 2
}

def saveCookies(cookies):
    with open(SESSION_FILE, 'wb') as f:
        pickle.dump(requests.utils.dict_from_cookiejar(cookies), f)

def createSession(sever):
    global SESSION_TRIES
    SESSION_TRIES -= 1

    username = input("Enter your username: ")
    password = getpass.getpass()

    session = requests.session()
    session.auth = requests.auth.HTTPBasicAuth(username, password)

    saveCookies(session.cookies)

    return session

def loadSession(server):
    global LOADED_SESSION
    LOADED_SESSION = True

    try:
        with open(SESSION_FILE, 'rb') as f:
            print("opened file")
            cookies = requests.utils.cookiejar_from_dict(pickle.load(f))
            print("loaded")
            session = requests.session()
            requests.utils.add_dict_to_cookiejar(session.cookies, cookies)
            print(cookies)
            print("created session")
    except:
        return createSession(server)

    print(session.auth)
    global SESSION_TRIES
    SESSION_TRIES -= 1
    return session

def sendPostContent(server, display_mode, title, content, session=''):
    rc = ''

    if not session == '':
        handler = session
    else:
        handler = requests

    try:
        rc = handler.post(server + '/save', data={
            'display_mode' : display_mode_mapping.get(display_mode),
            'title' : title,
            'content' : content,
            'irc_channel' : irc_channel
        }, verify=False)
        rc.raise_for_status()
        saveCookies(rc.cookies)
        print(rc.cookies)
    except:
        print(rc.status_code)
        if rc.status_code == 401 and SESSION_TRIES > 0:
            if LOADED_SESSION:
                session = createSession(server)
            else:
                session = loadSession(server)
            return sendPostContent(server, display_mode, title, content, session)
        try:
            additional_info = ' with error code: ' + str(rc.status_code)
        except:
            additional_info = rc

        print('Failed to contact server: ' + server + additional_info)
        return True

    return rc.text

def wrongConfigComplain(additional=None):
    print((
        'Configure pasty in ' + CONFIG_FILE + ' as follows:\n' +
        EXAMPLE_CONFIG
    ))

    if additional != None:
        print(additional)

    sys.exit(1)

if not os.path.isfile(CONFIG_FILE):
    wrongConfigComplain()

try:
    conff = open(os.path.expanduser(CONFIG_FILE))
    cy = yaml.load(conff)
    conff.close()
    server = cy.get('server')
    channel = cy.get('channel')
except:
    wrongConfigComplain()

if server == None:
    print('No server specified')
    sys.exit(1)

if channel == None:
    print('No default channel specified')
    sys.exit(1)

server = server.strip()
if not 'http' in server and not 'https' in server:
    wrongConfigComplain('\n\nyour are missing the protocol (http or https)')

parser = argparse.ArgumentParser(description='pasty - command line tool for pasty, a modern pastebot')
parser.add_argument('title', type=str, help='Titel of the post')
parser.add_argument('files', nargs='+', metavar='FILE', type=str, help='files which gets posted')
parser.add_argument('--type', '-t', type=str, default='md', choices=['md', 'text', 'code'], help='Defines how the post should get parsed')
parser.add_argument('--channel', '-c', type=str, default=channel, help='Specifies on which IRC channel pasty should post')
parser.add_argument('--upload', '-u', dest='upload', action='store_true', help='Upload files instead of posting their contents')

args = parser.parse_args()

display_mode = args.type
input_files = args.files
title = args.title
irc_channel = args.channel
upload = args.upload

if not '#' in irc_channel:
    irc_channel = '#' + irc_channel

if not upload:
    content = ''
    try:
        for file in input_files:
            fd = open(os.path.expanduser(file), 'r')
            content += fd.read()
            fd.close()
    except:
        print('Failed to read file list: ' + str(input_files))
        sys.exit(1)
    url = sendPostContent(server, display_mode, title, content)
    if type(url) != type(bool()):
        print((
            'Successfully posted ' + title + ' to Pasty\n'
            'Share this URL:\n\n'+ server + '/get/' + url
        ))

    sys.exit(0)


else:
    content = 'See files below'
    url = sendPostContent(server, display_mode, title, content)
    if type(url) != type(bool()):
        print('Uploading files ...')
        files = [ ( 'file', open(f, 'rb') ) for f in input_files ]

        rc = requests.post(server + '/upload/' + url, files=files)
        if rc.status_code != 200:
            print('Failed to upload files')
            if requests.post(server + '/delete/' + url).status_code != 200:
                print('Failed to delete generated post')
        else:
            print((
                'Successfully posted ' + title + ' to Pasty\n'
                'Share this URL:\n\n'+ server + '/get/' + url
            ))

        sys.exit(0)
